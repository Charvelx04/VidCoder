<Window
	x:Class="VidCoder.View.EncodingWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:model="clr-namespace:VidCoderCommon.Model;assembly=VidCoderCommon"
	xmlns:res="clr-namespace:VidCoder.Resources"
	xmlns:selectors="clr-namespace:VidCoder.View.Selectors"
	xmlns:vidCoder="clr-namespace:VidCoder"
	xmlns:view="clr-namespace:VidCoder.View"
	Title="{Binding WindowTitle}"
	Width="700"
	Height="467"
	MinWidth="588"
	MinHeight="467"
	Closed="Window_Closed"
	Closing="Window_Closing"
	ShowInTaskbar="False"
	Style="{StaticResource NormalWindow}"
	TextOptions.TextFormattingMode="Display"
	WindowStartupLocation="CenterOwner"
	WindowStyle="ToolWindow">
	<Window.Resources>
		<Style x:Key="TreeViewItemFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB" />
		<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181" />
		<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Focusable" Value="False" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Grid Background="Transparent">
							<Border
								Width="18"
								Height="18"
								Padding="5 5 0 5"
								HorizontalAlignment="Left"
								VerticalAlignment="Center">
								<Path
									x:Name="ExpandPath"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									Data="{StaticResource TreeArrow}"
									Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
									Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
									UseLayoutRounding="True">
									<Path.RenderTransform>
										<RotateTransform Angle="135" CenterX="3" CenterY="3" />
									</Path.RenderTransform>
								</Path>
							</Border>
						</Grid>

						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="True">
								<Setter TargetName="ExpandPath" Property="RenderTransform">
									<Setter.Value>
										<RotateTransform Angle="180" CenterX="3" CenterY="3" />
									</Setter.Value>
								</Setter>
								<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver" Value="True" />
									<Condition Property="IsChecked" Value="True" />
								</MultiTrigger.Conditions>
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="PresetTreeFolderItemStyle" TargetType="{x:Type TreeViewItem}">
			<EventSetter Event="DragOver" Handler="OnPresetTreeFolderDragOver" />
			<EventSetter Event="Drop" Handler="OnPresetTreeFolderDrop" />
			<EventSetter Event="PreviewDragLeave" Handler="OnPresetTreeFolderPreviewDragLeave" />
			<Setter Property="IsSelected" Value="False" />
			<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
			<Setter Property="Focusable" Value="False" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
			<Setter Property="Padding" Value="1 0 0 0" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TreeViewItem}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid Grid.Row="0" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="14" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.ContextMenu>
									<ContextMenu>
										<MenuItem Command="{Binding CreateSubfolder}" Header="{x:Static res:EncodingRes.PresetFolderCreateSubfolderMenuItem}" />
										<MenuItem
											Command="{Binding RenameFolder}"
											Header="{x:Static res:EncodingRes.PrestFolderRenameFolderMenuItem}"
											Visibility="{Binding IsNotRoot,
											                     Converter={StaticResource VisibilityConverter}}" />
										<MenuItem
											Command="{Binding RemoveFolder}"
											Header="{x:Static res:EncodingRes.PresetFolderRemoveFolderMenuItem}"
											Visibility="{Binding IsNotRoot,
											                     Converter={StaticResource VisibilityConverter}}" />
									</ContextMenu>
								</Grid.ContextMenu>
								<Border
									x:Name="Bd"
									Grid.Column="0"
									Grid.ColumnSpan="3"
									Margin="-100 0 0 0"
									Padding="{TemplateBinding Padding}"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" />
								<ContentPresenter
									x:Name="PART_Header"
									Grid.Column="1"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="Stretch"
									ContentSource="Header"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								<ToggleButton
									x:Name="Expander"
									Grid.Column="0"
									Grid.ColumnSpan="3"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									ClickMode="Press"
									IsChecked="{Binding IsExpanded,
									                    RelativeSource={RelativeSource TemplatedParent}}"
									Style="{StaticResource ExpandCollapseToggleStyle}" />
								<Button
									x:Name="PresetFolderMenu"
									Grid.Column="2"
									Padding="5 0"
									HorizontalAlignment="Left"
									Click="OnPresetFolderMenuClick"
									Content="...">
									<Button.Style>
										<Style BasedOn="{StaticResource BorderlessButtonStyle}" TargetType="Button">
											<Style.Triggers>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=IsMouseOver}" Value="False" />
														<Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=ContextMenu.IsOpen}" Value="False" />
													</MultiDataTrigger.Conditions>
													<MultiDataTrigger.Setters>
														<Setter Property="Visibility" Value="Collapsed" />
													</MultiDataTrigger.Setters>
												</MultiDataTrigger>
											</Style.Triggers>
										</Style>
									</Button.Style>
								</Button>
							</Grid>

							<ItemsPresenter
								x:Name="ItemsHost"
								Grid.Row="1"
								Margin="10 0 0 0" />
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="False">
								<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
							</Trigger>
							<Trigger Property="HasItems" Value="False">
								<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
					<Setter Property="ItemsPanel">
						<Setter.Value>
							<ItemsPanelTemplate>
								<VirtualizingStackPanel />
							</ItemsPanelTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="PresetTreeItemStyle" TargetType="{x:Type TreeViewItem}">
			<EventSetter Event="MouseDown" Handler="OnPresetTreeItemMouseDown" />
			<EventSetter Event="MouseMove" Handler="OnPresetTreeItemMouseMove" />
			<EventSetter Event="RequestBringIntoView" Handler="OnRequestBringPresetIntoView" />
			<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
			<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
			<Setter Property="Padding" Value="1 0 0 0" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TreeViewItem}">
						<Grid>
							<Border
								x:Name="Bd"
								Margin="-100 0 0 0"
								Padding="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="true" />
							<ContentPresenter
								x:Name="PART_Header"
								Margin="12 0 0 0"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								ContentSource="Header"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Grid>

						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="Bd" Property="Background" Value="#DCEBF2" />
							</Trigger>
							<Trigger Property="IsSelected" Value="True">
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="True" />
									<Condition Property="IsSelectionActive" Value="False" />
								</MultiTrigger.Conditions>
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
							</MultiTrigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
					<Setter Property="ItemsPanel">
						<Setter.Value>
							<ItemsPanelTemplate>
								<VirtualizingStackPanel />
							</ItemsPanelTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>
	</Window.Resources>
	<Window.InputBindings>
		<KeyBinding
			Key="Q"
			Command="{Binding ProcessingService.AddToQueue}"
			Modifiers="Control" />
		<KeyBinding
			Key="O"
			Command="{Binding ProcessingService.QueueFiles}"
			Modifiers="Control+Shift" />
		<KeyBinding
			Key="T"
			Command="{Binding ProcessingService.QueueTitlesAction}"
			Modifiers="Control" />
		<KeyBinding
			Key="D"
			Command="{Binding OutputPathService.PickOutputPath}"
			Modifiers="Control" />

		<KeyBinding
			Key="S"
			Command="{Binding Save}"
			Modifiers="Control" />
		<KeyBinding
			Key="S"
			Command="{Binding SaveAs}"
			Modifiers="Control+Shift" />
		<KeyBinding Key="F2" Command="{Binding Rename}" />
	</Window.InputBindings>
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition
				Name="listColumn"
				Width="150"
				MinWidth="70"
				MaxWidth="250" />
			<ColumnDefinition Width="*" />
		</Grid.ColumnDefinitions>

		<TreeView
			Name="presetTreeView"
			Grid.Column="0"
			Margin="0 0 4 0"
			HorizontalAlignment="Stretch"
			AllowDrop="True"
			Background="WhiteSmoke"
			BorderThickness="0"
			Canvas.ZIndex="3"
			ItemsSource="{Binding PresetsService.AllPresetsTree}"
			SelectedItemChanged="TreeView_OnSelectedItemChanged"
			Visibility="{Binding PresetPanelOpen,
			                     Converter={StaticResource VisibilityConverter}}">
			<TreeView.ItemTemplateSelector>
				<selectors:PresetTreeTemplateSelector>
					<selectors:PresetTreeTemplateSelector.FolderTemplate>
						<HierarchicalDataTemplate ItemsSource="{Binding AllItems}">
							<TextBlock
								Margin="5"
								FontSize="14"
								Text="{Binding Name}" />
						</HierarchicalDataTemplate>
					</selectors:PresetTreeTemplateSelector.FolderTemplate>
					<selectors:PresetTreeTemplateSelector.PresetTemplate>
						<DataTemplate>
							<TextBlock
								Margin="5 7"
								FontSize="12"
								Text="{Binding DisplayNameWithStar}">
								<TextBlock.Style>
									<Style TargetType="TextBlock">
										<Style.Triggers>
											<DataTrigger Binding="{Binding Preset.IsBuiltIn}" Value="False">
												<Setter Property="Foreground" Value="#0B4BC2" />
												<Setter Property="FontWeight" Value="SemiBold" />
											</DataTrigger>
											<DataTrigger Binding="{Binding Preset.IsQueue}" Value="True">
												<Setter Property="Foreground" Value="#222222" />
												<Setter Property="FontWeight" Value="Normal" />
											</DataTrigger>
											<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TreeViewItem}}" Value="True">
												<Setter Property="FontWeight" Value="Bold" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBlock.Style>
							</TextBlock>
						</DataTemplate>
					</selectors:PresetTreeTemplateSelector.PresetTemplate>
				</selectors:PresetTreeTemplateSelector>
			</TreeView.ItemTemplateSelector>
			<TreeView.ItemContainerStyleSelector>
				<selectors:PresetTreeContainerStyleSelector FolderStyle="{StaticResource PresetTreeFolderItemStyle}" PresetStyle="{StaticResource PresetTreeItemStyle}" />
			</TreeView.ItemContainerStyleSelector>
			<TreeView.ItemsPanel>
				<ItemsPanelTemplate>
					<StackPanel />
				</ItemsPanelTemplate>
			</TreeView.ItemsPanel>
		</TreeView>

		<GridSplitter
			Grid.Column="0"
			Width="4"
			HorizontalAlignment="Right"
			VerticalAlignment="Stretch"
			Background="{StaticResource SplitterBrush}"
			Canvas.ZIndex="4"
			ShowsPreview="True"
			Visibility="{Binding PresetPanelOpen,
			                     Converter={StaticResource VisibilityConverter}}" />

		<Grid
			Name="mainGrid"
			Grid.Column="1"
			Background="#BBB">
			<ToolBarPanel
				Margin="-5 0 -14 0"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Top"
				UseLayoutRounding="True">
				<ToolBar Loaded="ToolBar_Loaded" ToolBarTray.IsLocked="True">
					<ToolBar.Background>
						<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
							<GradientStop Offset="0.0" Color="#EEE" />
							<GradientStop Offset="1.0" Color="#BBB" />
						</LinearGradientBrush>
					</ToolBar.Background>
					<Button
						Height="24"
						Margin="4 0 0 0"
						Padding="5 0"
						Command="{Binding TogglePresetPanel}"
						ToolTip="{x:Static res:EncodingRes.ClosePresetsListToolTip}"
						Visibility="{Binding PresetPanelOpen,
						                     Converter={StaticResource VisibilityConverter}}">
						<Path Data="M 8,0 L 9,1 L 2,8 L 9,15 L 8,16 L 0,8 Z" Fill="Black" />
					</Button>
					<Button
						Height="24"
						Margin="4 0 0 0"
						Padding="5 0"
						Command="{Binding TogglePresetPanel}"
						ToolTip="{x:Static res:EncodingRes.OpenPresetsListToolTip}"
						Visibility="{Binding PresetPanelOpen,
						                     Converter={StaticResource InverseVisibilityConverter}}">
						<Path Data="M 1,0 L 9,8 L 1,16 L 0,15 L 7,8 L 0,1 Z" Fill="Black" />
					</Button>
					<Button
						Height="24"
						MinWidth="70"
						Margin="4 0 0 0"
						Padding="5 0"
						Command="{Binding Save}"
						Visibility="{Binding SaveRenameButtonsVisible,
						                     Converter={StaticResource VisibilityConverter}}">
						<StackPanel Orientation="Horizontal">
							<Image
								Width="16"
								Height="16"
								Source="/Icons/save.png" />
							<TextBlock Margin="5 0 0 0" Text="{x:Static res:EncodingRes.Save}" />
						</StackPanel>
					</Button>
					<Button
						Height="24"
						MinWidth="70"
						Padding="5 0"
						Command="{Binding SaveAs}"
						Content="{x:Static res:EncodingRes.SaveAs}" />
					<Button
						Height="24"
						MinWidth="70"
						Padding="5 0"
						Command="{Binding Rename}"
						Content="{x:Static res:EncodingRes.Rename}"
						Visibility="{Binding SaveRenameButtonsVisible,
						                     Converter={StaticResource VisibilityConverter}}" />
					<Button
						Height="24"
						MinWidth="70"
						Padding="5 0"
						Command="{Binding DeletePreset}"
						Visibility="{Binding PresetsService.SelectedPreset.Preset.IsModified,
						                     Converter={StaticResource VisibilityConverter}}">
						<StackPanel Orientation="Horizontal">
							<Image
								Width="16"
								Height="16"
								Source="/Icons/undo_16x16.png" />
							<TextBlock Margin="4 0 0 0" Text="{x:Static res:EncodingRes.Revert}" />
						</StackPanel>
					</Button>
					<Button
						Height="24"
						MinWidth="70"
						Padding="5 0"
						Command="{Binding DeletePreset}"
						Visibility="{Binding DeleteButtonVisible,
						                     Converter={StaticResource VisibilityConverter}}">
						<StackPanel Orientation="Horizontal">
							<Grid Background="Transparent">
								<Rectangle
									Width="14"
									Height="3"
									Fill="{StaticResource RedFill}">
									<Rectangle.LayoutTransform>
										<RotateTransform Angle="-45" />
									</Rectangle.LayoutTransform>
								</Rectangle>
								<Rectangle
									Width="14"
									Height="3"
									Fill="{StaticResource RedFill}">
									<Rectangle.LayoutTransform>
										<RotateTransform Angle="45" />
									</Rectangle.LayoutTransform>
								</Rectangle>
							</Grid>
							<TextBlock Margin="4 0 0 0" Text="{x:Static res:CommonRes.Delete}" />
						</StackPanel>
					</Button>
					<Button
						Height="24"
						MinWidth="70"
						Padding="5 0"
						Command="{Binding OpenPreviewWindow,
						                  Source={StaticResource WindowXamlHelper}}"
						IsEnabled="{Binding HasSourceData}"
						Visibility="{Binding PreviewWindowOpen,
						                     Source={StaticResource WindowXamlHelper},
						                     Converter={StaticResource InverseVisibilityConverter}}">
						<StackPanel Orientation="Horizontal">
							<Image
								Width="16"
								Height="16"
								Source="/Icons/preview.png" />
							<TextBlock
								Margin="5 0 0 0"
								VerticalAlignment="Center"
								Text="{x:Static res:CommonRes.PreviewLabel}" />
						</StackPanel>
					</Button>
				</ToolBar>
			</ToolBarPanel>

			<TabControl
				Name="tabControl"
				Margin="0 28 0 0"
				SelectedIndex="{Binding SelectedTabIndex}">
				<TabItem Header="{x:Static res:EncodingRes.TabHeader_Container}">
					<view:ContainerPanel DataContext="{Binding ContainerPanelViewModel}" />
				</TabItem>
				<TabItem Header="{x:Static res:EncodingRes.TabHeader_Sizing}">
					<view:SizingPanel DataContext="{Binding SizingPanelViewModel}" />
				</TabItem>
				<TabItem Header="{x:Static res:EncodingRes.TabHeader_VideoFilters}">
					<view:VideoFiltersPanel DataContext="{Binding VideoFiltersPanelViewModel}" />
				</TabItem>
				<TabItem Header="{x:Static res:EncodingRes.TabHeader_VideoEncoding}">
					<view:VideoPanel DataContext="{Binding VideoPanelViewModel}" />
				</TabItem>
				<TabItem Header="{x:Static res:EncodingRes.TabHeader_Advanced}" Visibility="{Binding VideoPanelViewModel.UseAdvancedTab, Converter={StaticResource VisibilityConverter}}">
					<view:AdvancedPanel DataContext="{Binding AdvancedPanelViewModel}" />
				</TabItem>
				<TabItem Header="{x:Static res:EncodingRes.TabHeader_AudioEncoding}">
					<view:AudioPanel DataContext="{Binding AudioPanelViewModel}" />
				</TabItem>
			</TabControl>
		</Grid>
	</Grid>
</Window>
