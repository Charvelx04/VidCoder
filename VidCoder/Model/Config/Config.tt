<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="VidCoder" #>
<#
string fileName = this.Host.ResolvePath("Config.txt");
var settings = new List<ConfigDeclaration>();
var lines = File.ReadLines(fileName);
foreach (string line in lines)
{
	if (!string.IsNullOrWhiteSpace(line))
	{
		int firstPipeIndex = line.IndexOf('|');
		string name = line.Substring(0, firstPipeIndex);

		int secondPipeIndex = line.IndexOf('|', firstPipeIndex + 1);
		string valueType = line.Substring(firstPipeIndex + 1, secondPipeIndex - firstPipeIndex - 1);

		string defaultValue = line.Substring(secondPipeIndex + 1);

		settings.Add(new ConfigDeclaration { Name = name, ValueType = valueType, Default = defaultValue });
	}
}
#>
using System.Collections.Generic;
using System.Data.SQLite;
using VidCoder.Model;

namespace VidCoder
{
	public static class Config
	{
		private static bool initialized;
		private static Dictionary<string, object> cache;

		public static void EnsureInitialized(SQLiteConnection connection)
		{
			if (!initialized)
			{
				Initialize(connection);
				initialized = true;
			}
		}

		public static void Refresh(SQLiteConnection connection)
		{
			Initialize(connection);
		}

		private static void Initialize(SQLiteConnection connection)
		{
			cache = new Dictionary<string, object>();
<#
foreach (var setting in settings)
{
#>
			cache.Add("<#= setting.Name #>", DatabaseConfig.Get("<#= setting.Name #>", <#= setting.Default #>, connection));
<#
}   
#>
		}

		public static T Get<T>(string key)
		{
			return (T)cache[key];
		}

		public static void Set<T>(string key, T value)
		{
			cache[key] = value;
			DatabaseConfig.Set(key, value);
		}

<#
foreach (var setting in settings)
{
#>
		public static <#= setting.ValueType #> <#= setting.Name #>
		{
			get
			{
				return (<#= setting.ValueType #>)cache["<#= setting.Name #>"];
			}
			
			set
			{
				cache["<#= setting.Name #>"] = value;
				DatabaseConfig.Set("<#= setting.Name #>", value);
			}
		}
<#
}   
#>
	}
}